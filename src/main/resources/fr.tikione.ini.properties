#
# TikiOne INI, a pure Java library for configuration files management.
# Copyright (C) 2008-2013  Jonathan Lermitage
#
# This library is free software; you can redistribute it and/or modify it under the terms of the
# GNU Lesser General Public License as published by the Free Software Foundation; either version
# 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
# the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with this
# library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#

#
# ================= Default implementation for INI files =================
#
# You can customize the default INI parsers configuration by editing this file and/or programmaticaly.
# See the Ini.getConfig() method, the Ini(Properties) constructor and the Config class,
#
# Please note that all leading and trailing whitespace characters and tabulations are removed from config
# properties individual values (so, if a property contains a list of values, each of them is trimmed).
#

# -----------------------
# Performance adjustments
# -----------------------
#
# Average number of sections per file:
#  fr.tikione.ini.stat.nb.sections.perfile = <integer>
# Sections are stored in a Map. You can adjust its load factor:
#  fr.tikione.ini.stat.loadfactor.sections.perfile = <float>
fr.tikione.ini.stat.nb.sections.perfile=10
fr.tikione.ini.stat.loadfactor.sections.perfile=0.75
#
# Average number of keys per section:
#  fr.tikione.ini.stat.nb.keys.persection.perfile = <integer>
# Keys of a section are stored in a Map (i.e. there is one Map for each section). You can adjust its load factor:
#  fr.tikione.ini.stat.loadfactor.keys.persection.perfile = <float>
fr.tikione.ini.stat.nb.keys.persection.perfile=50
fr.tikione.ini.stat.loadfactor.keys.persection.perfile=0.75
#
# Average number of shortcuts per line:
#  fr.tikione.ini.stat.nb.shortcuts.perline = <integer>
fr.tikione.ini.stat.nb.shortcuts.perline=1
#
# Average number of comment lines per file:
#  fr.tikione.ini.stat.nb.comments.perfile = <integer>
fr.tikione.ini.stat.nb.comments.perfile=10

# -----------------------------------------
# INI parser configuration (basic features)
# -----------------------------------------
#
# Default value when getting a key value:
#  fr.tikione.ini.rule.keys.getvalue.defaultvalue = <string>
fr.tikione.ini.rule.keys.getvalue.defaultvalue=
#
# Strings that signal the start of a section declaration:
#  fr.tikione.ini.rule.comments.start.symbols = <strings separated by a separator>
# Strings list separator for the "fr.tikione.ini.rule.section.start.symbols" property:
#  fr.tikione.ini.rule.comments.start.symbols.separator = <string>
fr.tikione.ini.rule.section.start.symbols=[
fr.tikione.ini.rule.section.start.symbols.separator=,
#
# Strings that signal the end of a section declaration:
#  fr.tikione.ini.rule.comments.start.symbols = <strings separated by a separator>
# Strings list separator for the "fr.tikione.ini.rule.section.end.symbols" property:
#  fr.tikione.ini.rule.comments.start.symbols.separator = <string>
fr.tikione.ini.rule.section.end.symbols=]
fr.tikione.ini.rule.section.end.symbols.separator=,
#
# Strings that signal the start of a comment line:
#  fr.tikione.ini.rule.comments.start.symbols = <strings separated by a separator>
# Strings list separator for the "fr.tikione.ini.comments.start.symbols" property:
#  fr.tikione.ini.rule.comments.start.symbols.separator = <string>
fr.tikione.ini.rule.comments.start.symbols=#,;
fr.tikione.ini.rule.comments.start.symbols.separator=,
#
# Strings used to separate keys from values:
#  fr.tikione.ini.rule.affectations.symbols = <strings separated by a separator>
# Strings list separator for the "fr.tikione.ini.affectations.symbols" property:
#  fr.tikione.ini.rule.affectations.symbols.separator = <string>
fr.tikione.ini.rule.affectations.symbols==,:
fr.tikione.ini.rule.affectations.symbols.separator=,

# --------------------------------------------
# INI parser configuration (advanced features)
# --------------------------------------------
#
# Maximum number of shortcuts pursuit, to prevent infinitive loops:
#  fr.tikione.ini.rule.max.shortcuts.pursuit = <integer>
fr.tikione.ini.rule.max.shortcuts.pursuit=150
#
# Conversion of backslash at end of line to line concatenation when parsing the INI content:
#  fr.tikione.ini.rule.keys.parse.convert.linebreak.escape = <boolean>
fr.tikione.ini.rule.keys.parse.convert.lineconcat.escape=false
#
# String used to mark a line concatenation when parsing the INI content:
#  fr.tikione.ini.rule.lineconcat.symbol = <string>
fr.tikione.ini.rule.lineconcat.symbol=\\
#
# Conversion of Unicode escapes to UTF8 when getting a key value:
#  fr.tikione.ini.rule.keys.getvalue.convert.unicode.escape = <boolean>
fr.tikione.ini.rule.keys.getvalue.convert.unicode.escape=false
#
# Recognize and follow environment variable shortcuts when getting a key value:
#  fr.tikione.ini.rule.keys.getvalue.follow.envvar.shortcuts = <boolean>
fr.tikione.ini.rule.keys.getvalue.follow.envvar.shortcuts=true
#
# Recognize and follow system property shortcuts when getting a key value:
#  fr.tikione.ini.rule.keys.getvalue.follow.sysprop.shortcuts = <boolean>
fr.tikione.ini.rule.keys.getvalue.follow.sysprop.shortcuts=true
#
# Recognize and follow section/key reference shortcuts when getting a key value:
#  fr.tikione.ini.rule.keys.getvalue.follow.seckeyref.shortcuts = <boolean>
fr.tikione.ini.rule.keys.getvalue.follow.seckeyref.shortcuts=true
#
# Regular expression used to recognize any type of shortcut (section/key, system
# property, and environment variable). It doesn't need to define a capturing group:
#  fr.tikione.ini.rule.keys.parse.shortcut.any = <string>
fr.tikione.ini.rule.keys.parse.shortcut.any=\\$\\{([^\\}]+)\\}
#
# Regular expression used to recognize environment variable shortcuts. It needs to
# define a capturing group to identify the sequence to replace by the shortcut value:
#  fr.tikione.ini.rule.keys.parse.shortcut.envvar = <string>
# The character(s) just before the environment variable name:
#  fr.tikione.ini.rule.keys.parse.shortcut.envvar.var.left = <string>
# The character(s) just after the environment variable name:
#  fr.tikione.ini.rule.keys.parse.shortcut.envvar.var.right = <string>
fr.tikione.ini.rule.keys.pattern.shortcut.envvar=(\\$\\{@env/[^\\}]+\\})
fr.tikione.ini.rule.keys.pattern.shortcut.envvar.left=/
fr.tikione.ini.rule.keys.pattern.shortcut.envvar.right=}
#
# Regular expression used to recognize system property shortcuts. It needs to
# define a capturing group to identify the sequence to replace by the shortcut value:
#  fr.tikione.ini.rule.keys.parse.shortcut.sysprop = <string>
# The character(s) just before the system property name:
#  fr.tikione.ini.rule.keys.parse.shortcut.sysprop.var.left = <string>
# The character(s) just after the system property name:
#  fr.tikione.ini.rule.keys.parse.shortcut.sysprop.var.right = <string>
fr.tikione.ini.rule.keys.pattern.shortcut.sysprop=(\\$\\{@prop/[^\\}]+\\})
fr.tikione.ini.rule.keys.pattern.shortcut.sysprop.left=/
fr.tikione.ini.rule.keys.pattern.shortcut.sysprop.right=}
#
# Regular expression used to recognize section/key shortcuts. It needs to
# define a capturing group to identify the sequence to replace by the shortcut value:
#  fr.tikione.ini.rule.keys.parse.shortcut.seckeyref = <string>
# The character(s) just before the section/key name:
#  fr.tikione.ini.rule.keys.parse.shortcut.seckeyref.var.left = <string>
# The character(s) between the section and key names:
#  fr.tikione.ini.rule.keys.parse.shortcut.seckeyref.var.middle = <string>
# The character(s) just after the section/key name:
#  fr.tikione.ini.rule.keys.parse.shortcut.seckeyref.var.right = <string>
fr.tikione.ini.rule.keys.pattern.shortcut.seckeyref=(\\$\\{[^\\@^\\}]+\\})
fr.tikione.ini.rule.keys.pattern.shortcut.seckeyref.left={
fr.tikione.ini.rule.keys.pattern.shortcut.seckeyref.middle=/
fr.tikione.ini.rule.keys.pattern.shortcut.seckeyref.right=}
